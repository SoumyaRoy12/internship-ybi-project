# -*- coding: utf-8 -*-
"""YBI Internship project -1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HVmNmvhLprtmpoTIwru3wIoxNDmqYsGf
"""

pip install pandas scikit-learn scikit-surprise

import pandas as pd
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.feature_extraction.text import TfidfVectorizer

data = {
    'user_id': ['U1', 'U2', 'U3', 'U4', 'U5'],
    'product_id': ['P1', 'P2', 'P3', 'P4', 'P5'],
    'product_name': ['Phone', 'Laptop', 'Headphones', 'Camera', 'Smartwatch'],
    'description': [
        'Android smartphone with 64GB storage',
        'Gaming laptop with high RAM and SSD',
        'Wireless headphones with noise cancellation',
        'DSLR camera with 24MP lens',
        'Smartwatch with health tracking and notifications'
    ],
    'rating': [5, 4, 3, 5, 4]
}

df = pd.DataFrame(data)

# Create a pivot table for ratings
ratings_matrix = df.pivot_table(index='user_id', columns='product_name', values='rating').fillna(0)

# Calculate similarity between users
user_similarity = cosine_similarity(ratings_matrix)

# Create a DataFrame for similarity
user_similarity_df = pd.DataFrame(user_similarity, index=ratings_matrix.index, columns=ratings_matrix.index)

print("User Similarity Matrix:")
print(user_similarity_df)

# TF-IDF Vectorizer on product description
tfidf = TfidfVectorizer(stop_words='english')
tfidf_matrix = tfidf.fit_transform(df['description'])

# Compute cosine similarity between products
product_similarity = cosine_similarity(tfidf_matrix, tfidf_matrix)

# Product similarity DataFrame
product_similarity_df = pd.DataFrame(product_similarity, index=df['product_name'], columns=df['product_name'])

print("\nProduct Similarity Matrix:")
print(product_similarity_df)

def recommend_similar_products(product_name, num_recommendations=3):
    if product_name not in product_similarity_df.columns:
        return ["Product not found!"]
    # Get similarity scores
    similar_scores = product_similarity_df[product_name].sort_values(ascending=False)
    recommended = similar_scores.iloc[1:num_recommendations+1].index.tolist()
    return recommended